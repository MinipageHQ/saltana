import { CreditCard, useElements, useStripe } from '@stripe/react-stripe-js'
import React, { useEffect, useMemo, useState } from 'react'
import { formatAmountForDisplay } from '@/client/stripe'
import { useMutation, useQuery } from 'react-query'
import axios from 'axios'
import tw from 'twin.macro'

import { useForm } from 'react-hook-form'
import useLogin from 'hooks/useLogin'
import { useEffectOnce } from 'react-use'
const CARD_OPTIONS = {
  iconStyle: 'solid' as const,
  style: {
    base: {
      fontSize: '16px',
    },
  },
}
const CHECKOUT_STATES = {
  LOADING: 'loading',
  INITIAL: 'initial',
  SUCCESS: 'success',
  ERROR: 'error',
}

function CreditCardInput({ onChange }) {
  return <CardElement options={CARD_OPTIONS} onChange={onChange} />
}

function usePaymentIntentMutation() {
  const paymentIntentMutation = useMutation(async (assets) => {
    const paymentIntentResponse = await axios.post(
      '/api/methods/checkout/intent',
      {
        assets,
      },
    )

    if (paymentIntentResponse.status !== 200) {
      throw new Error(`ERROR_${paymentIntentResponse.status}`)
    }

    return paymentIntentResponse.data
  })

  return paymentIntentMutation
}

function usePaymentConfirmMutation() {
  const stripe = useStripe()

  const paymentConfirmMutation = useMutation(
    async ({
      paymentIntent,
      card,
      email,
    }: {
      paymentIntent: any
      card: any
      email: string
    }) => {
      const paymentConfirmation = await stripe.confirmCardPayment(
        paymentIntent.client_secret,
        {
          payment_method: {
            card,
            billing_details: { email },
          },
        },
      )

      // verify payment confirmation & fetch order id (might be generated by the Stripe webhook)
      const verifyPaymentConfirmation = await axios.post(
        '/api/methods/checkout/verify',
        {
          paymentIntentId: paymentConfirmation.paymentIntent.id,
        },
      )

      return verifyPaymentConfirmation.data
    },
  )

  return paymentConfirmMutation
}

export default function useCheckout({ items }) {
  const methods = useForm() // basically for validating the email field
  const [status, setStatus] = useState(CHECKOUT_STATES.LOADING)
  const [errorMessage, setErrorMessage] = useState('')

  const stripe = useStripe()
  const elements = useElements()

  const paymentIntentMutation = usePaymentIntentMutation()
  const paymentConfirmMutation = usePaymentConfirmMutation()
  const loginMutation = useLogin({ redirect: true })

  // get a new payment intent every time items are changed
  useEffect(() => {
    const assets = items.map(({ id, quantity }) => ({ id, quantity }))
    paymentIntentMutation.mutate(assets)
  }, [items])

  const cardElement = elements.getElement(CardElement)

  const card = async function onSubmit({ email }: { email: string }) {
    // first get da monies

    const paymentConfirmation = await paymentConfirmMutation.mutateAsync({
      email,
    })
  }

  return {
    onSubmit,
    paymentIntent: paymentIntentMutation.data,
    status,
    errorMessage,
  }
}
